export const schemaValidator = {
  title: 'Валидатор Схемы JSON',
  h1Title: 'Validate JSON Schema',
  seo_title: 'Валидация JSON По Схеме – Обеспечение Целостности Структуры Данных',
  description: 'Проверяйте соответствие JSON-данных спецификациям схемы. Обеспечивайте API-контракты, типы данных и ограничения полей безупречно.',
  keywords: 'JSON Schema,валидация JSON,валидация схемы,проверка структуры JSON,проверка формата JSON,схема JSON,валидация данных JSON,проверка соответствия структуры,целостность данных JSON,валидация по схеме,валидация ограничений JSON,валидация типов,структурная валидация,валидация паттернов,валидация обязательных полей,проверка формата JSON,валидатор контрактов JSON,валидация схемы API',
  introduction: 'Нужно убедиться, что ваши данные JSON соответствуют определенной схеме (например, контрактам API или моделям данных)? Наш Валидатор JSON Schema проверяет, соответствует ли ваш JSON определенной схеме, верифицируя типы полей, обязательные ключи и ограничения данных. Это критически важно для командных сотрудничеств, документации API и обеспечения согласованности данных между системами.\n\nКак это работает: Загрузите ваш JSON и файл схемы (или вставьте схему напрямую), и мы проверим соответствие таким свойствам как `type`, `enum`, `minimum` и `pattern`. Сообщения об ошибках укажут точно, где данные не соответствуют схеме, помогая быстро исправить проблемы.\n\nНезависимо от того, разрабатываете ли вы микросервисы, валидируете пользовательский ввод или стандартизируете конвейеры данных, наш инструмент валидации JSON Schema обеспечивает надежность и соответствие ваших структур данных. Попробуйте это бесплатно уже сегодня!',
  jsonData: 'Данные JSON',
  jsonSchema: 'Схема JSON',
  options: 'Параметры Валидации',
  validate: 'Проверить',
  validating: 'Проверка...',
  clear: 'Очистить',
  loadExample: 'Загрузить Пример',
  jsonPlaceholder: 'Введите или вставьте данные JSON для проверки',
  schemaPlaceholder: 'Введите или вставьте схему JSON',
  result: 'Результат Валидации',
  valid: 'Действительно',
  invalid: 'Недействительно',
  errorDetails: 'Детали Ошибки',
  guideTitle: 'Руководство По JSON Schema',
  guideDescription: 'JSON Schema - это стандарт для описания и проверки структур данных JSON. Вот некоторые общие правила валидации:',
  basicTypesTitle: 'Валидация Основных Типов',
  commonRulesTitle: 'Общие Правила Валидации',
  strictMode: 'Строгий Режим',
  strictModeDescription: 'Применять дополнительные ограничения валидации, не указанные в спецификации JSON Schema',
  jsonParseError: 'Ошибка Парсинга JSON',
  schemaParseError: 'Ошибка Парсинга Схемы',
  rules: 'Общие Правила Валидации',

  // How to Use Section
  howToUse: {
    title: 'Как Использовать Валидатор JSON Schema',
    steps: [
      {
        title: 'Подготовьте JSON Данные',
        description: 'Скопируйте и вставьте ваши JSON данные в левое поле ввода. Убедитесь, что JSON имеет правильный синтаксис перед валидацией против схемы.'
      },
      {
        title: 'Определите JSON Schema',
        description: 'Введите или вставьте вашу JSON Schema в правое поле. Schema должна определять ожидаемую структуру, типы данных и ограничения для ваших JSON данных.'
      },
      {
        title: 'Настройте Опции',
        description: 'Выберите режим валидации: используйте строгий режим для дополнительных проверок или стандартный режим для базовой валидации согласно спецификации JSON Schema.'
      },
      {
        title: 'Запустите Валидацию',
        description: 'Нажмите кнопку "Проверить" для запуска процесса валидации. Результаты покажут, соответствуют ли данные схеме, с детальными сообщениями об ошибках в случае несоответствия.'
      }
    ]
  },

  // FAQ Section
  faq: {
    title: 'Часто Задаваемые Вопросы',
    items: [
      {
        question: 'Что такое JSON Schema и зачем она нужна?',
        answer: 'JSON Schema - это стандарт для описания структуры JSON данных. Она определяет типы данных, обязательные поля, форматы и ограничения. Это полезно для валидации API контрактов, обеспечения целостности данных и документирования ожидаемых структур данных.'
      },
      {
        question: 'Какие версии JSON Schema поддерживаются?',
        answer: 'Наш валидатор поддерживает все основные версии JSON Schema, включая draft-04, draft-06, draft-07 и draft 2019-09. Инструмент автоматически определяет версию на основе указанного в схеме $schema или использует последнюю стабильную версию по умолчанию.'
      },
      {
        question: 'В чем разница между строгим и стандартным режимами?',
        answer: 'Стандартный режим следует официальной спецификации JSON Schema. Строгий режим добавляет дополнительные проверки, такие как запрет дополнительных свойств по умолчанию и более строгая валидация типов, что может быть полезно для критичных приложений.'
      },
      {
        question: 'Может ли валидатор обрабатывать сложные вложенные схемы?',
        answer: 'Да, валидатор полностью поддерживает сложные схемы с глубокой вложенностью, включая массивы объектов, условную валидацию, ссылки ($ref) и определения схем. Он может обрабатывать даже самые сложные структуры данных.'
      },
      {
        question: 'Как интерпретировать сообщения об ошибках валидации?',
        answer: 'Сообщения об ошибках показывают конкретный путь в JSON, где произошла ошибка, тип ошибки и ожидаемое значение. Например, "Свойство \'age\' должно быть числом, но получено строковое значение" четко указывает на проблему и способ ее решения.'
      },
      {
        question: 'Поддерживаются ли кастомные форматы валидации?',
        answer: 'Валидатор поддерживает стандартные форматы JSON Schema, такие как "email", "date", "uri", "uuid" и другие. Для кастомных форматов можно определить паттерны регулярных выражений в схеме.'
      },
      {
        question: 'Безопасны ли мои данные и схемы при использовании этого инструмента?',
        answer: 'Абсолютно! Вся валидация выполняется локально в вашем браузере. Ни JSON данные, ни схемы не отправляются на какие-либо серверы, что обеспечивает полную конфиденциальность и безопасность ваших данных.'
      },
      {
        question: 'Могу ли я использовать этот инструмент для валидации API ответов?',
        answer: 'Да, это один из основных случаев использования! Вы можете создать схему, описывающую ожидаемую структуру API ответа, а затем валидировать фактические ответы против этой схемы для обеспечения согласованности API.'
      }
    ]
  }
}; 